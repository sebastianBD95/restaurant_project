name: Frontend Deploy
on:
  push:
    tags:
      - "restaurant_front/v*"
    paths:
      - "restaurant_front/**"
      - "package*.json"
      - ".github/workflows/deploy-frontend.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      registry: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd restaurant_front
          
          # Convert tag format (restaurant_front/v1.0.0 -> restaurant_front_v1.0.0)
          DOCKER_TAG=$(echo ${{ github.ref_name }} | sed 's/restaurant_front\//restaurant_front_/')
          
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG .
          
          # Push the image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG
          
          # Output the full image name
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Docker Compose file
        run: |
          cat > docker-compose.frontend.yaml << 'EOF'
          version: "3.9"
          
          services:
            restaurant-frontend:
              image: ${{ needs.build.outputs.image }}
              container_name: restaurant-frontend
              restart: unless-stopped
              expose:
                - "3000"
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              networks:
                - frontend-network
          
          networks:
            frontend-network:
              driver: bridge
          EOF

      - name: Deploy to EC2
        run: |
          # Get the image name from build job
          IMAGE_NAME="${{ needs.build.outputs.image }}"
          
          # Get ECR registry from build job
          ECR_REGISTRY="${{ needs.build.outputs.registry }}"
          
          # Create deployment command
          cat > deploy-frontend.json << EOF
          {
            "commands": [
              "bash -lc 'set -euo pipefail; echo \"Starting frontend deployment...\"; aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY; echo \"Pulling image: $IMAGE_NAME\"; docker pull \"$IMAGE_NAME\"; mkdir -p /opt/restaurant-frontend; cd /opt/restaurant-frontend; aws s3 cp s3://${{ secrets.MIGRATIONS_BUCKET }}/deployment/docker-compose.frontend.yaml .; echo \"IMAGE_NAME=$IMAGE_NAME\" > .env; docker-compose -f docker-compose.frontend.yaml down || true; docker-compose -f docker-compose.frontend.yaml up -d; docker-compose -f docker-compose.frontend.yaml ps'"
            ]
          }
          EOF
          
          # Send command to EC2
          CMD_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters file://deploy-frontend.json \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Command.CommandId' \
            --output text)
          
          echo "Command ID: $CMD_ID"
          
          # Wait for command completion
          aws ssm wait command-executed \
            --command-id "$CMD_ID" \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}
          
          # Get command output
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --region ${{ secrets.AWS_REGION }}

      - name: Upload Docker Compose to S3
        run: |
          aws s3 cp docker-compose.frontend.yaml s3://${{ secrets.MIGRATIONS_BUCKET }}/deployment/docker-compose.frontend.yaml