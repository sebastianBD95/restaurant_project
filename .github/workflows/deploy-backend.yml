name: Build and Deploy Backend

on:
  workflow_dispatch:
  push:
    tags:
      - "restaurant_manager/v*"
    paths:
      - "restaurant_manager/**"
      - ".github/workflows/deploy-backend.yml"

jobs:
  build:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      ECR_REPOSITORY: restaurant-app-dev-backend
      IMAGE_TAG_BACKEND: ${{ github.ref_name }}
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG_BACKEND: ${{ env.IMAGE_TAG_BACKEND }}
        run: |
          cd restaurant_manager
          # Convert tag format from restaurant_manager/v* to restaurant_manager_v*
          DOCKER_TAG=$(echo $IMAGE_TAG_BACKEND | sed 's/restaurant_manager\//restaurant_manager_/')

          # Build a docker container for ARM64 and push it to ECR
          docker build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG" >> $GITHUB_OUTPUT
          echo "Built image: $ECR_REGISTRY/$ECR_REPOSITORY:$DOCKER_TAG"

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Get latest frontend image tag
        id: get-frontend-tag
        run: |
          # List all tags sorted by push time and pick the latest backend tag only
          IMAGE_TAG_FRONTEND=$(aws ecr describe-images \
            --repository-name restaurant-app-dev-backend \
            --query "sort_by(imageDetails,&imagePushedAt)[].imageTags[]" \
            --output text | tr '\t' '\n' | grep '^restaurant_front_' | tail -n 1)

          if [ -z "$IMAGE_TAG_FRONTEND" ]; then
            echo "ERROR: Could not find a frontend tag (prefix: restaurant_front_) in repository restaurant-app-dev-backend" >&2
            exit 1
          fi

          echo "Latest frontend tag: $IMAGE_TAG_FRONTEND"
          echo "frontend_tag=$IMAGE_TAG_FRONTEND" >> $GITHUB_OUTPUT

      - name: Copy deployment files to EC2
        run: |
          # Upload to S3 for deployment
          aws s3 cp docker-compose.production.yaml s3://${{ secrets.MIGRATIONS_BUCKET }}/deployment/docker-compose.production.yaml
          aws s3 cp Caddyfile s3://${{ secrets.MIGRATIONS_BUCKET }}/deployment/Caddyfile

      - name: Build SSM deployment command JSON
        id: build
        shell: bash
        run: |
          # Debug: Print the image variable
          echo "Image from build job: ${{ needs.build.outputs.image }}"
          
          # Fallback: Construct image name if output is empty
          if [ -z "${{ needs.build.outputs.image }}" ]; then
            DOCKER_TAG=$(echo ${{ github.ref_name }} | sed 's/restaurant_manager\//restaurant_manager_/')
            IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/restaurant-app-dev-backend:$DOCKER_TAG"
            echo "Using fallback image name: $IMAGE_NAME"
          else
            IMAGE_NAME="${{ needs.build.outputs.image }}"
            echo "Using build job output: $IMAGE_NAME"
          fi
          
          # Extract registry and tag from image name
          ECR_REGISTRY=$(echo $IMAGE_NAME | cut -d'/' -f1)
          IMAGE_TAG_BACKEND=$(echo $IMAGE_NAME | cut -d':' -f2)
          IMAGE_TAG_FRONTEND="${{ steps.get-frontend-tag.outputs.frontend_tag }}"
          
          # Create JSON file for deployment command
          cat > deploy.json << EOF
          {
            "commands": [
              "bash -lc '
                set -euo pipefail
                echo "Starting deployment..."
                
                # Login to ECR
                aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
                  docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
                
                # Pull the latest image
                echo "Pulling image: $IMAGE_NAME"
                docker pull "$IMAGE_NAME"
                
                # Setup working directory
                mkdir -p /opt/restaurant-manager
                cd /opt/restaurant-manager
                
                # Download configuration files
                aws s3 cp s3://${{ secrets.MIGRATIONS_BUCKET }}/deployment/docker-compose.production.yaml docker-compose.yaml
                aws s3 cp s3://${{ secrets.MIGRATIONS_BUCKET }}/deployment/Caddyfile .
                
                # Create environment file
                echo "ECR_REGISTRY=$ECR_REGISTRY" > .env
                echo "IMAGE_TAG_BACKEND=$IMAGE_TAG_BACKEND" >> .env
                echo "IMAGE_TAG_FRONTEND=$IMAGE_TAG_FRONTEND" >> .env
                echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
                echo "AWS_PROFILE=${{ secrets.AWS_PROFILE }}" >> .env
                echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
                echo "APP_ENV=prod" >> .env
                
                # Deploy the application
                docker-compose -f docker-compose.yaml down || true
                docker-compose -f docker-compose.yaml up -d
                docker-compose -f docker-compose.yaml ps
              '
            ]
          }
          EOF

      - name: Deploy to EC2
        id: deploy
        run: |
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --comment "Deploy backend $GITHUB_SHA" \
            --parameters file://deploy.json \
            --query 'Command.CommandId' \
            --output text)
          echo "cmd_id=$CMD_ID" >> "$GITHUB_OUTPUT"

      - name: Wait for deployment completion
        run: aws ssm wait command-executed --command-id "${{ steps.deploy.outputs.cmd_id }}" --instance-id "${{ secrets.EC2_INSTANCE_ID }}"

      - name: Report deployment status
        run: |
          aws ssm get-command-invocation \
            --command-id "${{ steps.deploy.outputs.cmd_id }}" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query 'Status' --output text

      - name: Health check
        run: |
          sleep 10
          curl -f http://${{ secrets.EC2_INSTANCE_ID }}/health || echo "Health check failed"
